40*.65
40*.7
q()
x<-5
x
x
load("C:/Documents/comp_inference/week2/dataframes.RData")
fix(dat)
names(dat)
getwd()
ls()
load("C:/Documents/DU_stats_consulting/projects/ueta_star_types/all_dat_data.RData")
ls()
library(rpart)
library(nnet)
q()
load("C:/Documents/DU_stats_consulting/projects/ueta_star_types/exploratory.RData")
plot(dat250_H[,flux_cols[1:3]],col=dat250_H$objtype)
plot(dat250_H[,flux_cols[16:18]],col=dat250_H$objtype)
plot(dat250_H[,flux_cols[13]],col=dat250_H$objtype)
d<-dist(dat250_H[,flux_cols])
sum(is.na(d))
h<-hclust(d)
plot(h)
d<-dist(dat250_J[,flux_cols])
sum(is.na(d))
j<-hclust(d)
plot(cutree(h, k = 20),col=dat250_H$objtype) # eh.
help(hclust)
help(cutree)
plot(h)
plot(cutree(h, k = 4),col=dat250_H$objtype) # eh.
tree_h<-(cutree(h, k = 4),col=dat250_H$objtype) # eh.
tree_h<-cutree(h, k = 4),col=dat250_H$objtype
tree_h<-cutree(h, k = 4)
str(tree_h)
table(tree_h)
table(tree_h,dat250_H$objtype)
tree_h<-cutree(h, k = 5)
table(tree_h,dat250_H$objtype)
tree_j<-cutree(j, k = 5)
table(tree_h,tree_j)
tree_h<-cutree(h, k = 7)
tree_j<-cutree(j, k = 7)
table(tree_h,tree_j)
library(tree)
fmla<-as.formula(paste("objtype~",paste(nam,collapse="+")))
fmla
model<-tree(fmla,data=dat250_H)
plot(model)
plot(model)
library(nnet)
fmla<-as.formula(paste("objtype~",paste(nam,collapse="+")))
fit<-rpart(fmla,data=dat250_H)
library(rpart)
fmla<-as.formula(paste("objtype~",paste(nam,collapse="+")))
fit<-rpart(fmla,data=dat250_H)
summary(fit)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
fmla
names(dat250_H)
help(tree)
ir.tr <- tree(Species ~., iris)
ir.tr
summary(ir.tr)
plot(ir.tree)
plot(ir.tr)
text(ir.tr)
summary(model)
names(dat250_H)
model<-tree(objtype~F_J+F_9+F_18,data=dat250_H)
summary(model)
plot(model)
text(model)
model<-tree(objtype~F_U+F_9+F_18,data=dat250_H)
summary(model)
plot(model)
text(model)
sum(is.na(dat250_H$F_U))
ylevels(model)
model$ylevels
ylevels(ir.tr)
predict(ir.tr,iris)
dim(iris)
head(predict(model,dat250_H))
names(dat)
save.image("C:/Documents/DU_stats_consulting/projects/ueta_star_types/try.RData")
ls()
getwd()
load("C:/Documents/DU_stats_consulting/projects/ueta_star_types/exploratory.RData")
fmla<-as.formula(paste("objtype~",paste(nam,collapse="+")))
fit<-rpart(fmla,data=dat250_H)
summary(fit)
printcp(fit)
library(rpart)
# http://www.statmethods.net/advstats/cart.html
fmla<-as.formula(paste("objtype~",paste(nam,collapse="+")))
fit<-rpart(fmla,data=dat250_H)
summary(fit)
summary(fit)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
plot(fit, uniform=TRUE,
main="Classification Tree for H-normalization")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
pfit<- prune(fit, cp=   fit$cptable[which.min(fit$cptable[,"xerror"]),"CP"])
plot(pfit, uniform=TRUE,
main="Pruned Classification Tree for H-normalization")
text(pfit, use.n=TRUE, all=TRUE, cex=.8)
post(pfit, file = "c:/ptree.ps",
title = "Pruned Classification Tree for H-normalization")
summary(fit)
names(dat)
apply(dat,2,function(x){sum(is.na(x))})
flux_cols<-grep("F_",names(dat))
names(dat)[flux_cols]
dat_H<-dat
dat_H[,flux_cols]<-
apply(dat_H[,flux_cols],2,function(x){x/dat_H$F_H})
nam<-names(dat)[flux_cols]
fmla<-as.formula(paste("objtype~",paste(nam,collapse="+")))
fit<-rpart(fmla,data=dat_H)
summary(fit)
printcp(fit)
plotcp(fit) # visualize cross-validation results
plot(fit, uniform=TRUE,
main="Classification Tree for H-normalization")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
plot(fit, uniform=TRUE)
text(fit, use.n=TRUE, all=TRUE, cex=.8)
fix(iris)
names(iris)
fit.ir<-rpart(Species~.,data=iris)
summary(fit.ir)
printcp(fit.ir)
plotcp(fit.ir)
library(randomforest)
library(randomForest)
flux_cols<-grep("F_",names(dat250_H))
nam<-names(dat250_H)[flux_cols]
fmla<-as.formula(paste("objtype~",paste(nam,collapse="+")))
fit<-rpart(fmla,data=dat250_H)
summary(fit)
plot(fit, uniform=TRUE,
main="Classification Tree for H-normalization")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
help(randomforest)
help(randomForest)
save.image("C:/Documents/DU_stats_consulting/projects/ueta_star_types/tree_and_forest.RData")
data(iris)
set.seed(71)
iris.rf <- randomForest(Species ~ ., data=iris, importance=TRUE,
proximity=TRUE)
print(iris.rf)
round(importance(iris.rf), 2)
par()
par_base<-par()
iris.mds <- cmdscale(1 - iris.rf$proximity, eig=TRUE)
op <- par(pty="s")
pairs(cbind(iris[,1:4], iris.mds$points), cex=0.6, gap=0,
col=c("red", "green", "blue")[as.numeric(iris$Species)],
main="Iris Data: Predictors and MDS of Proximity Based on RandomForest")
par(op)
print(iris.mds$GOF)
round(importance(iris.rf), 2)
plotcp(fit.ir)
summary(fit.ir)
fmla
H_250.rf <- randomForest(fmla, data=dat250_H, importance=TRUE,
proximity=TRUE)
varImpPlot(iris.rf)
nas<-apply(dat250[,flux_cols],2,function(x){sum(is.na(x))})
flux_cols
nas
complete_nam<-nam[nas==0]
fmla<-as.formula(paste("objtype~",paste(complete_nam,collapse="+")))
H_250.rf <- randomForest(fmla, data=dat250_H, importance=TRUE,
proximity=TRUE)
print(H_250.rf)
round(importance(H_250.rf), 2)
varImpPlot(H_250.rf)
save.image("C:/Documents/DU_stats_consulting/projects/ueta_star_types/tree_and_forest.RData")
help(coxph0
)
??coxph
require(survival)
dim(logan)
logan[,1:20]
logan[1:20,]
n <- nrow(logan)
indx <- rep(1:n, length(resp))
logan2 <- data.frame(logan[indx,],
id = indx,
tocc = factor(rep(resp, each=n)))
logan2$case <- (logan2$occupation == logan2$tocc)
resp <- levels(logan$occupation)
n <- nrow(logan)
indx <- rep(1:n, length(resp))
logan2 <- data.frame(logan[indx,],
id = indx,
tocc = factor(rep(resp, each=n)))
logan2[1:20,]
table(logan2$id)
logan2$case <- (logan2$occupation == logan2$tocc)
table(logan2$case)
m<-clogit(case ~ tocc + tocc:education + strata(id), logan2)
summary(m)
m2<-clogit(case ~ tocc + education + strata(id), logan2)
summary(m2)
anova(m,m2)
require(lmtest)
lrtest(m,m2)
loglik(m)
logLik(m)
AIC(m)
AIC(m2)
head(predict(m))
head(predict(m,response=TRUE))
head(predict(m,response=FALSE))
str(predict(m,response=FALSE))
q()
rm(list=ls())
x<-10
x
x<-77
x
ls()
install.packages("xtable")
summary(cars)
file.edit('~/.Rprofile')
file.edit('~/.Rprofile')
"C:/Documents/Coursera_data_science/StatisticalInference/project"
help(rexp)
100/40
sqrt(2.5)
3+4
x<-1:20
datfile<-file.choose()
help(read.csv)
getwd()
setwd("C:/Documents/Coursera_data_science/MachineLearning/project")
library(knitr)
knit2html(form_classification.Rmd)
knit2html("form_classification.Rmd")
setwd("C:/Documents/Coursera_data_science/DataProducts/project/qqnormApp")
getwd()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(rt)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("rsconnect")
devtools::install_github('rstudio/rsconnect')
library(rsconnect)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='cdurso17', token='BF5CDA9B0C20BC1638C27D8CF93E78AA', secret='AHAHlX2PCtjDyrQvJMKTBDG/QWSmpShPLBWqjk5j')
library(shinyapps)
shinyapps::deployApp()
setwd("C:/Documents/Coursera_data_science/DataProducts/week2")
library(devtools)
library(slidify)
library(devtools)
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
library(slidify)  # brings up index.Rmd to edit for slidify, and creates
# associated files
author("slidify_practice")
library(knitr)
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
getwd()
setwd("C:/Documents/Coursera_data_science/DataProducts/project")
slidify('index.Rmd')
setwd("C:/Documents/Coursera_data_science/DataProducts/week2")
slidify('index.Rmd')
slidify('index.Rmd')
setwd("C:/Documents/Coursera_data_science/DataProducts/week2")
slidify('index.Rmd')
list.files()
setwd("C:/Documents/Coursera_data_science/DataProducts/week2/slidify_practice")
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
publish(user="cdurso17", repo="https://github.com/cdurso17/data_products.git")
